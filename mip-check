#!/usr/bin/env bash

version=0.02

usage="$(basename "$0") [-h] [-v] [-s n] FILES[OPTIONAL]
Program for tidying perl scripts and running perl critic. Also checks that modified files has had their version updated.
Default input files are new and modified files.
Version: $version

where:
    -h  show this help text
    -s  set the perl critic severity (default: 1)
    -v  show version number"

## Set default severity for perl critic
critic_severity=1

while getopts ':hs:v' option; do
    case "$option" in
        h) echo "$usage"
            exit
            ;;
        s) critic_severity=$OPTARG
            ;;
        :) printf "missing argument for -%s\n" "$OPTARG" >&2
            echo "$usage" >&2
            exit 1
            ;;
		v) echo "Version: $version"
			exit
			;;
        \?) printf "illegal option: -%s\n" "$OPTARG" >&2
            echo "$usage" >&2
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

## Get infiles from command line
infiles=( "$@" )
## Otherwise, get infiles from git
if [ ${#infiles[@]} -lt 1 ] ; then
    infiles=$(git status --short | perl -nae 'print $F[1] . q{ }')
fi

## Get current dir
mip_dir="$(dirname "$(readlink -f "$0")")"

for infile in ${infiles[@]}
do
    ## Only operate on perl files
    if ! [[ $infile =~ .*\.(t|pm|pl|test)$ ]] ; then
        echo "[SKIPPING]: $infile"
        continue
    fi

    echo ""
    echo "[INFILE]: $infile"

	## Check if file has been modified 
	if [ "$(git status --short $infile | perl -nae 'print $F[0]')" == "M" ] ; then 
		## Check that the "our $VERSION" line has been updated 
		version_update=$(git diff $infile | perl -nae 'if ($_ =~ /\bour\s\$VERSION\b/xms) {print q{OK}; exit 0}')
		if [ "$version_update" != "OK" ] ; then
			echo "[UPDATE VERSION]: $infile"
		fi
	fi

    ## Run perltidy
    perltidy --maximum-line-length=90 --iterations=2 -b -bext='/' $infile

    ## Run perlcritic
    echo "[PERL CRITIC]"
    perlcritic \-${critic_severity} \-p ${mip_dir}/.perlcriticrc_mip $infile

done
