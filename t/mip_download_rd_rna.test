#!/usr/bin/env perl

use 5.026;
use Carp;
use charnames qw{ :full :short };
use Cwd;
use English qw{ -no_match_vars };
use File::Basename qw{ dirname basename };
use File::Path qw{ remove_tree };
use File::Spec::Functions qw{ catfile catdir };
use FindBin qw{ $Bin };
use Getopt::Long;
use open qw{ :encoding(UTF-8) :std };
use Params::Check qw{ check allow last_error};
use Test::More;
use utf8;
use warnings qw{ FATAL utf8 };

## Cpanm
use autodie qw{open close :all};
use IPC::Cmd qw{ can_run run};
use Modern::Perl qw{ 2018 };
use Readonly;

## MIPs lib/
use lib catdir( dirname($Bin), q{lib} );
use MIP::Constants qw{ $NEWLINE $SPACE };
use MIP::Script::Utils qw{ help };

our $USAGE = build_usage( {} );

my $VERBOSE = 1;
our $VERSION = 1.00;

## Set paths
my $conda_path = catdir( dirname($Bin), qw{ t data modules miniconda} );
my $config_file =
  catfile( dirname($Bin), qw{ templates mip_download_rd_rna_config_-1.0-.yaml } );
my $mip_path = catfile( dirname($Bin), q{mip} );

### User Options
GetOptions(

    q{c|config_file:s} => \$config_file,

    ## Display help text
    q{h|help} => sub {
        done_testing();
        say {*STDOUT} $USAGE;
        exit;
    },

    ## Display version number
    q{v|version} => sub {
        done_testing();
        say {*STDOUT} $NEWLINE . basename($PROGRAM_NAME) . $SPACE . $VERSION . $NEWLINE;
        exit;
    },
    q{vb|verbose} => $VERBOSE,
  )
  or (
    done_testing(),
    help(
        {
            USAGE     => $USAGE,
            exit_code => 1,
        }
    )
  );

ok( can_run(q{mip}), q{Checking can run mip} );

## Test execution of mip download
# Create array ref for cmd
my $cmds_ref = [
    q{perl},      $mip_path,       qw{ download rd_rna }, q{--config},
    $config_file, q{--conda_path}, $conda_path,           qw{ --dra },
];

my ( $success, $error_message, $full_buf, $stdout_buf, $stderr_buf ) =
  run( command => $cmds_ref, verbose => $VERBOSE );
ok( $success, q{Executed mip download rd_rna sbatch mode} );

## Clean-up
my @clenup_dirs = qw{ mip_download mip_log };
foreach my $dir (@clenup_dirs) {

    remove_tree( catfile( cwd(), $dir ) );
}

done_testing();

######################
####SubRoutines#######
######################

sub build_usage {

## Function : Build the USAGE instructions
## Returns  :
## Arguments: $program_name => Name of the script

    my ($arg_href) = @_;

    ## Default(s)
    my $program_name;

    my $tmpl = {
        program_name => {
            default     => basename($PROGRAM_NAME),
            store       => \$program_name,
            strict_type => 1,
        },
    };

    check( $tmpl, $arg_href, 1 ) or croak q{Could not parse arguments!};

    return <<"END_USAGE";
 $program_name [options]
    -c/--config_file YAML config file for download parameters (defaults to ../templates/mip_download_rd_rna_config_-1.0-.yaml")
    -t/--travis Travis parameters
    -vb/--verbose    Verbose
    -h/--help        Display this help message
    -v/--version     Display version
END_USAGE
}
