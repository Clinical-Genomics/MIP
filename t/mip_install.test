#!/usr/bin/env perl

use Carp;
use open qw{ :encoding(UTF-8) :std };
use charnames qw{ :full :short };
use English qw{ -no_match_vars };
use strict;
use warnings;
use warnings qw{ FATAL utf8 };
use utf8;

BEGIN {

    ## Special case to initiate testing
    my @modules = qw{ Test::More };

    ## Evaluate that all modules required are installed
    check_modules( \@modules );

    sub check_modules {

        ## Function : Evaluate that all modules required are installed
        ## Returns  :
        ## Arguments: $modules_ref
        ##          : $modules_ref => Array of module names

        my ($modules_ref) = @_;

      MODULE:
        foreach my $module ( @{$modules_ref} ) {

  # Replace "::" with "/" since the automatic replacement magic only occurs for barewords.
            $module =~ s/::/\//gxms;

            # Add perl module ending for the same reason
            $module .= q{.pm};

            if ( eval { require $module; 1 } ) {
            }
            if ($EVAL_ERROR) {

                warn q{NOTE: }
                  . $module
                  . q{ not installed - Please install to run install.t.} . qq{\n};
                warn q{NOTE: Aborting!} . qq{\n};
                exit 1;
            }
        }
        return;
    }

    ## Initate tests
    say {*STDOUT} q{Initiate tests:} . qq{\n};
    say {*STDOUT} q{Testing default perl modules and selected functions} . qq{\n};

    ## More proper testing
    use Test::More;

    ## Modules with import
    my %perl_module;

    $perl_module{charnames}                = [qw{ :full :short }];
    $perl_module{English}                  = [qw{ -no_match_vars }];
    $perl_module{q{File::Basename}}        = [qw{ dirname basename }];
    $perl_module{q{File::Spec::Functions}} = [qw{ catfile catdir devnull }];
    $perl_module{FindBin}                  = [qw{ $Bin }];
    $perl_module{q{IPC::Cmd}}              = [qw{ can_run run }];
    $perl_module{open}                     = [qw{ :encoding(UTF-8) :std }];
    $perl_module{q{Params::Check}}         = [qw{ check allow last_error }];
    $perl_module{warnings}                 = [qw{ FATAL utf8 }];

  PERL_MODULE:
    while ( my ( $module, $module_imports_ref ) = each %perl_module ) {

        use_ok( $module, @{$module_imports_ref} )
          or BAIL_OUT q{Can't load } . $module;
    }

    ## Modules
    @modules = qw{ Carp Cwd Getopt::Long utf8 strict warnings };

  MODULE:
    for my $module (@modules) {

        require_ok($module) or BAIL_OUT q{Can't load } . $module;
    }
}

use Cwd;
use FindBin qw{ $Bin };
use File::Basename qw{ dirname basename };
use File::Spec::Functions qw{ catfile catdir devnull };
use Getopt::Long;
use IPC::Cmd qw{ can_run run };
use Params::Check qw{ check allow last_error };
use Readonly;
use Test::More;

## MIPs lib/
use lib catdir( dirname($Bin), q{lib} );
use MIP::Script::Utils qw{ help };
use MIP::Constants qw{ $EMPTY_STR $NEWLINE $SPACE };

our $USAGE = build_usage( {} );

my $conda_path;
my $verbose = 1;
our $VERSION = 1.36;

###User Options
GetOptions(
    q{cdp|conda_dir_path:s} => \$conda_path,
    q{vb|verbose}           => $verbose,
    q{h|help}               => sub {
        done_testing();
        print {*STDOUT} $USAGE, $NEWLINE;
        exit;
    },    #Display help text
    q{v|version} => sub {
        done_testing();
        print {*STDOUT} $NEWLINE . basename($PROGRAM_NAME) . $SPACE . $VERSION, $NEWLINE;
        exit;
    },    #Display version number
  )
  or (
    done_testing(),
    help(
        {
            USAGE     => $USAGE,
            exit_code => 1,
        }
    )
  );

## Conda check
ok( can_run(q{conda}), q{Checking can run of conda binary} );

## Pipeline installations to test
my %install_file = (
    rd_dna => q{Rd_dna.pm},
    rd_rna => q{Rd_rna.pm},
);

my @installation_modes = ( $EMPTY_STR, qw{ --prefer_shell --sbatch_mode } );

PIPELINE:
foreach my $pipeline ( keys %install_file ) {

    ok(
        catfile( dirname($Bin), qw{ lib MIP Cli Mip Install }, $install_file{$pipeline} ),
        qq{Locating $pipeline install script}
    );

    ## Test execution of install script
    my $cmds_ref =
      [ q{perl}, catfile( dirname($Bin), q{mip} ), q{install}, $pipeline, ];
    if ($conda_path) {

        push @{$cmds_ref}, q{--conda_path}, $conda_path;
    }
    push @{$cmds_ref}, q{--log_file}, catfile( cwd(), qw{mip_install_test.log} );

    push @{$cmds_ref}, q{--reference_dir}, cwd();

    foreach my $installation_mode (@installation_modes) {
        my @mode_cmds = @{$cmds_ref};

        if ( $installation_mode eq q{--sbatch_mode} ) {

            push @mode_cmds, qw{ --project_id development };
        }

        push @mode_cmds, $installation_mode;

        my ( $success, $error_message, $full_buf, $stdout_buf, $stderr_buf ) = run(
            command => \@mode_cmds,
            verbose => $verbose
        );

        ok( $success, qq{Executed $pipeline install $installation_mode} );

        ## Test that mip.sh has been created
        ok( -e catfile( getcwd(), q{mip.sh} ), qq{Located $pipeline mip.sh} );
    }

}

## Clean-up mip_install.pl output
my @outfiles = (qw{ mip.sh mip_install_test.log });

OUTFILE:
foreach my $outfile (@outfiles) {

    my $cmd = q{rm } . catfile( getcwd(), $outfile );
    if (
        scalar run(
            command => $cmd,
            timeout => 20,
            verbose => $verbose,
        )
      )
    {
        say {*STDOUT} q{Removed outfile successfully: } . $outfile;
    }
}

done_testing();

######################
####SubRoutines#######
######################

sub build_usage {

## Function : Build the USAGE instructions
## Returns  :
## Arguments: $program_name => Name of the script

    my ($arg_href) = @_;

    ## Default(s)
    my $program_name;

    my $tmpl = {
        program_name => {
            default     => basename($PROGRAM_NAME),
            store       => \$program_name,
            strict_type => 1,
        },
    };

    check( $tmpl, $arg_href, 1 ) or croak q{Could not parse arguments!};

    return <<"END_USAGE";
 $program_name [options]
    -cdp/--conda_dir_path The conda directory path (Default: "HOME/miniconda")
    -vb/--verbose         Verbose
    -h/--help             Display this help message
    -v/--version          Display version
END_USAGE
}
