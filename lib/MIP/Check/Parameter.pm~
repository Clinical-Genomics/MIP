package MIP::Check::Parameter;

#### Copyright 2017 Henrik Stranneheim

use strict;
use warnings;
use warnings qw(FATAL utf8);
use utf8;    #Allow unicode characters in this script
use open qw( :encoding(UTF-8) :std );
use charnames qw( :full :short );
use Carp;
use autodie;
use Params::Check qw[check allow last_error];
$Params::Check::PRESERVE_CASE = 1;    #Do not convert to lower case

BEGIN {

    use base qw(Exporter);
    require Exporter;

    # Set the version for version checking
    our $VERSION = 1.00;

    # Functions and variables which can be optionally exported
    our @EXPORT_OK = qw(check_allowed_array_values);
}

sub check_allowed_array_values {

##check_allowed_array_values

##Function : Check that the array values are allowed
##Returns  : ""
##Arguments: $allowed_values_ref, $values_ref
##         : $allowed_values_ref => Allowed values for parameter
##         : $values_ref         => Values for parameter

    my ($arg_href) = @_;

    ## Flatten argument(s)
    my $allowed_values_ref;
    my $values_ref;

    my $tmpl = {
        allowed_values_ref => {
            required    => 1,
            defined     => 1,
            default     => [],
            strict_type => 1,
            store       => \$allowed_values_ref
        },
        values_ref => {
            required    => 1,
            defined     => 1,
            default     => [],
            strict_type => 1,
            store       => \$values_ref
        },
    };

    check( $tmpl, $arg_href, 1 ) or croak qw(Could not parse arguments!);

    my %is_allowed;

    # Remake allowed values into keys in is_allowed hash
    map { $is_allowed{$_} = undef } @{$allowed_values_ref};

  VALUES:
    foreach my $value ( @{$values_ref} ) {

        if ( exists $is_allowed{$value} ) {

            $is_allowed{total_allowed_values_count}++;
        }
    }
    if ( $is_allowed{total_allowed_values_count} == scalar @{$values_ref} ) {

        return 1;
    }
}

1;
