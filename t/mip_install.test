#!/usr/bin/env perl

use 5.026;
use Carp;
use open qw{ :encoding(UTF-8) :std };
use charnames qw{ :full :short };
use English qw{ -no_match_vars };
use warnings;
use warnings qw{ FATAL utf8 };
use utf8;

BEGIN {

    ## Special case to initiate testing
    my @modules = qw{ Test::More };

    ## Evaluate that all modules required are installed
    check_modules( \@modules );

    sub check_modules {

        ## Function : Evaluate that all modules required are installed
        ## Returns  :
        ## Arguments: $modules_ref
        ##          : $modules_ref => Array of module names

        my ($modules_ref) = @_;

      MODULE:
        foreach my $module ( @{$modules_ref} ) {

            # Replace "::" with "/" since the automatic replacement magic only occurs for barewords.
            $module =~ s/::/\//gxms;

            # Add perl module ending for the same reason
            $module .= q{.pm};

            if ( eval { require $module; 1 } ) {
            }
            if ($EVAL_ERROR) {

                warn q{NOTE: }
                  . $module
                  . q{ not installed - Please install to run install.t.} . qq{\n};
                warn q{NOTE: Aborting!} . qq{\n};
                exit 1;
            }
        }
        return;
    }

    ## Initate tests
    say {*STDOUT} q{Initiate tests:} . qq{\n};
    say {*STDOUT} q{Testing default perl modules and selected functions} . qq{\n};

    ## More proper testing
    use Test::More;

    ## Modules with import
    my %perl_module;

    $perl_module{charnames}                = [qw{ :full :short }];
    $perl_module{English}                  = [qw{ -no_match_vars }];
    $perl_module{q{File::Basename}}        = [qw{ dirname basename }];
    $perl_module{q{File::Spec::Functions}} = [qw{ catfile catdir devnull }];
    $perl_module{FindBin}                  = [qw{ $Bin }];
    $perl_module{q{IPC::Cmd}}              = [qw{ can_run run }];
    $perl_module{open}                     = [qw{ :encoding(UTF-8) :std }];
    $perl_module{q{Params::Check}}         = [qw{ check allow last_error }];
    $perl_module{warnings}                 = [qw{ FATAL utf8 }];

  PERL_MODULE:
    while ( my ( $module, $module_imports_ref ) = each %perl_module ) {

        use_ok( $module, @{$module_imports_ref} )
          or BAIL_OUT q{Can't load } . $module;
    }

    ## Modules
    @modules = qw{ Carp Cwd Getopt::Long utf8 strict warnings };

  MODULE:
    for my $module (@modules) {

        require_ok($module) or BAIL_OUT q{Can't load } . $module;
    }
}

use Cwd;
use File::Basename qw{ dirname basename };
use File::Spec::Functions qw{ catfile catdir };
use FindBin qw{ $Bin };
use Getopt::Long;
use IPC::Cmd qw{ can_run run };
use Params::Check qw{ check allow last_error };
use Path::Tiny qw{ path };
use Test::More;

## MIPs lib/
use lib catdir( dirname($Bin), q{lib} );
use MIP::Script::Utils qw{ help };
use MIP::Constants qw{ $EMPTY_STR $MIP_VERSION $NEWLINE $SPACE };
use MIP::Environment::Child_process qw{ child_process };

our $USAGE = build_usage( {} );

my $conda_path       = catdir( dirname($Bin), qw{ t data modules miniconda} );
my $reference_dir    = catdir( dirname($Bin), qw{ t data mip_install_test } );
my $log_file_path    = catfile( cwd(), qw{mip_install_test.log} );
my $environment_name = q{mip_install_test};
my $verbose          = 1;
###User Options
GetOptions(
    q{vb|verbose} => $verbose,
    q{h|help}     => sub {
        done_testing();
        print {*STDOUT} $USAGE, $NEWLINE;
        exit;
    },    #Display help text
    q{v|version} => sub {
        done_testing();
        print {*STDOUT} $NEWLINE . basename($PROGRAM_NAME) . $SPACE . $MIP_VERSION, $NEWLINE;
        exit;
    },    #Display version number
  )
  or (
    done_testing(),
    help(
        {
            USAGE     => $USAGE,
            exit_code => 1,
        }
    )
  );

ok( catfile( dirname($Bin), qw{ lib MIP Cli Mip Install.pm } ), q{Locating install script} );

## Test execution of install script
my $cmds_ref = [
    q{perl},           catfile( dirname($Bin), q{mip} ),
    q{install},        q{--conda_path},
    $conda_path,       q{--environment_name},
    $environment_name, q{--log_file},
    $log_file_path,    q{--reference_dir},
    $reference_dir,    q{--test_mode},
];

my %process_return = child_process(
    {
        commands_ref => $cmds_ref,
        process_type => q{ipc_cmd_run},
        verbose      => $verbose,
    }
);

ok( $process_return{success}, q{Executed install} );

## When given option to pull singularity images for local installation
push @{$cmds_ref}, q{--singularity_local_install};
%process_return = child_process(
    {
        commands_ref => $cmds_ref,
        process_type => q{ipc_cmd_run},
        verbose      => $verbose,
    }
);
## Then return OK
ok( $process_return{success}, q{Executed local singularity install} );

## When given option to pull images using docker
push @{$cmds_ref}, qw{ --container_manager docker };
%process_return = child_process(
    {
        commands_ref => $cmds_ref,
        process_type => q{ipc_cmd_run},
        verbose      => $verbose,
    }
);
## Then return OK
ok( $process_return{success}, q{Executed docker install} );
## Remove paths
path($log_file_path)->remove;
path( catdir( $conda_path, q{envs}, $environment_name ) )->remove_tree;
path($reference_dir)->remove_tree;

done_testing();

######################
####SubRoutines#######
######################

sub build_usage {

## Function : Build the USAGE instructions
## Returns  :
## Arguments: $program_name => Name of the script

    my ($arg_href) = @_;

    ## Default(s)
    my $program_name;

    my $tmpl = {
        program_name => {
            default     => basename($PROGRAM_NAME),
            store       => \$program_name,
            strict_type => 1,
        },
    };

    check( $tmpl, $arg_href, 1 ) or croak q{Could not parse arguments!};

    return <<"END_USAGE";
 $program_name [options]
    -vb/--verbose         Verbose
    -h/--help             Display this help message
    -v/--version          Display version
END_USAGE
}
