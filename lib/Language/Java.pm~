package Language::Java;

use strict;
use warnings;
use warnings qw( FATAL utf8 );
use utf8;  #Allow unicode characters in this script
use open qw( :encoding(UTF-8) :std );
use charnames qw( :full :short );

BEGIN {
    require Exporter;

    # Set the version for version checking
    our $VERSION = 1.00;

    # Inherit from Exporter to export functions and variables
    our @ISA = qw(Exporter);

    # Functions and variables which are exported by default
    our @EXPORT = qw();

    # Functions and variables which can be optionally exported
    our @EXPORT_OK = qw(core);

}

use Params::Check qw[check allow last_error];
$Params::Check::PRESERVE_CASE = 1;  #Do not convert to lower case

sub core {

##core

##Function : Perl wrapper for writing GATK realignertargetcreator recipe to $FILEHANDLE. Based on java openjdk version "1.8.0_92".
##Returns  : ""
##Arguments: $FILEHANDLE, $memory_allocation, $java_use_large_pages_ref, $java_temporary_directory, $java_jar
##         : $FILEHANDLE               => Filehandle to write to
##         : $memory_allocation        => Memory allocation for java
##         : $java_use_large_pages_ref => Use java large pages {REF}
##         : $java_temporary_directory => Redirect tmp files to java temp {Optional}
##         : $java_jar                 => The JAR

    my ($arg_href) = @_;

    ## Flatten argument(s)
    my $FILEHANDLE;
    my $memory_allocation;
    my $java_use_large_pages_ref;
    my $java_temporary_directory;
    my $java_jar;

    my $tmpl = {
	FILEHANDLE => { store => \$FILEHANDLE},
	memory_allocation => { required => 1, defined => 1, strict_type => 1, store => \$memory_allocation},
	java_use_large_pages_ref => { required => 1, defined => 1, default => \$$, strict_type => 1, store => \$java_use_large_pages_ref},
	java_temporary_directory => { strict_type => 1, store => \$java_temporary_directory},
	java_jar => { strict_type => 1, store => \$java_jar},
    };

    check($tmpl, $arg_href, 1) or die qw[Could not parse arguments!];

    ## Java core
    my @commands = qw(java);  #Stores commands depending on input parameters

    if($memory_allocation) {
	
	push(@commands, "-".$memory_allocation);
    }
    $cmd_line .= "-".$memory_allocation." ";

    if ($$java_use_large_pages_ref) {

	$cmd_line .= "-XX:-UseLargePages ";  #UseLargePages for requiring large memory pages (cross-platform flag)
    }
    if (defined($java_temporary_directory)) {

	$cmd_line .= "-Djava.io.tmpdir=".$java_temporary_directory." ";  #Temporary Directory
    }
    if (defined($java_jar)) {

	$cmd_line .= "-jar ".$java_jar." ";
    }
    if($FILEHANDLE) {

	print $FILEHANDLE $cmd_line;
    }
    return $cmd_line;
}
